from datetime import datetime
from influxdb_client import InfluxDBClient, Point, WritePrecision
from influxdb_client.client.write_api import SYNCHRONOUS
#from ina219 import INA219
#from ina219 import DeviceRangeError

# You can generate a Token from the "Tokens Tab" in the UI
token = "AFr53l1Hwm-NSRRh0h4fHyzPsGWN4rLKbMmGBTG3GCY6N0b5mU8eQ1xNXvmNaFI3mg1lq39RONLghej1nuf2bA=="
org = "gatemarine"
bucket = "octopus_power_bucketson"

client = InfluxDBClient(url="http://65.21.107.165:8086", token=token)
write_api = client.write_api(write_options=SYNCHRONOUS)
from random import seed
from random import randint
import random
import json
import numpy as np
import time
def get_randomvoltage():
    return randint(0,10)*0.1 + 12
def get_randomcurrent_on():
    return randint(0,5)*0.01 + 0.15
def get_randomcurrent_off():
    return  randint(0,5)*0.01+0.03
def returnfakedata_ton(newtestdataon,measurement_name,device_name):
    volt_val=get_randomvoltage()
    current_val_ton=get_randomcurrent_on()
    power_ton=current_val_ton*volt_val
    newtestdataon=[{
            "measurement": measurement_name,
            "tags": {
            "Device": device_name,
                             },
            "fields": {
            "bus_voltage": volt_val,
            "current": current_val_ton,
            "power": power_ton
                }
            }]
    return newtestdataon
def returnfakedata_toff(newtestdataoff,measurement_name,device_name):
    volt_val=get_randomvoltage()
    current_val_toff=get_randomcurrent_off()
    power_toff=current_val_toff*volt_val 
    newtestdataoff = [{
            "measurement": measurement_name,
            "tags": {
            "Device": device_name,
                             },
            "fields": {
            "bus_voltage": volt_val,
            "current": current_val_toff,
            "power": power_toff
                }
            }]
    return newtestdataoff
def returngsmlanternpowerdata(newgsmpowerdata,measurement_name,device_name):
    #ina = INA219(SHUNT_OHMS, MAX_EXPECTED_AMPS, address=0x41)
    newgsmpowerdata = [{
            "measurement": measurement_name,
            "tags": {
            "Device": device_name,
                             },
            "fields": {
            "bus_voltage": 12 ,
            "current":  13,
            "power": 34
                }
            }]
    return newgsmpowerdata
def returngpslanternpowerdata(newgpspowerdata,measurement_name,device_name):
    #ina = INA219(SHUNT_OHMS, MAX_EXPECTED_AMPS, address=0x41)
    newgpspowerdata = [{
            "measurement": measurement_name,
            "tags": {
            "Device": device_name,
                             },
            "fields": {
            "bus_voltage": 12 ,#ina.voltage()
            "current":  13,#ina.current()
            "power": 34
                }
            }]
    return newgpspowerdata
def returngpssizlanternpowerdata(newgpssizpowerdata,measurement_name,device_name):
    #ina = INA219(SHUNT_OHMS, MAX_EXPECTED_AMPS, address=0x41)
    newgpssizpowerdata = [{
            "measurement": measurement_name,
            "tags": {
            "Device": device_name,
                             },
            "fields": {
            "bus_voltage": 12 ,#ina.voltage()
            "current":  13,#ina.current()
            "power": 43
                }
            }]
    return newgpssizpowerdata
def returnsealitelanternpowerdata(sealitedata,measurement_name,device_name):
    #ina = INA219(SHUNT_OHMS, MAX_EXPECTED_AMPS, address=0x41)
    sealitedata = [{
            "measurement": measurement_name,
            "tags": {
            "Device": device_name,
                             },
            "fields": {
            "bus_voltage": 12 ,#ina.voltage()
            "current":  13,#ina.current()
            "power": 56
                }
            }]
    return sealitedata


def applicaiton_start_powertest(testdata_on,testdata_off,gsm_data,gpsdata,gpssizdata,sealitedata,measurement_selection):
    measurement_period=0.1
    if(measurement_selection==1):
        for _ in range(20):
            time.sleep(measurement_period)
            write_api.write(bucket, org,returnfakedata_ton(testdata_on,"Octopus_psower_testnew","gsmtest"))
                
        for _ in range(60):
            time.sleep(measurement_period)
            write_api.write(bucket, org, returnfakedata_toff(testdata_off,"Octopus_power_testnew","gsmtest"))
                
    elif(measurement_selection==0):
        time.sleep(measurement_period)
        write_api.write(bucket, org,returngsmlanternpowerdata(gsm_data,"GSMLANTERN","GSMLANTERN"))
        time.sleep(0.001)
        write_api.write(bucket, org,returngpslanternpowerdata(gpsdata,"GPSLANTERN","GPSLANTERN"))
        time.sleep(0.001)
        write_api.write(bucket, org,returngpssizlanternpowerdata(gpssizdata,"GPSSİZLANTERN","GPSSİZLANTERN"))
        time.sleep(0.001)
        write_api.write(bucket, org,returnsealitelanternpowerdata(sealiteda,"SEALİTELANTERN","SEALİTELANTERN"))
        time.sleep(0.001)

dataon = {}
dataoff={}   
datagsmli={}
datagpsli={}
datasealite={}
datagpssiz={}
while(1):
    applicaiton_start_powertest(dataon,dataoff,datagsmli,datagpssiz,datagpsli,datasealite,0)
    time.sleep(0.001)    